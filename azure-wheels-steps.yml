parameters:
  python_version: ''

steps:
  # This could probably be done more elegantly. Comparison happens here so we
  # can use the value of the py35 variable and assign a variable "active" that's
  # available to all subsequent build steps in the pipeline
  - bash: |
      BUILD35=0; [ "$(py35)" == "True" ] && BUILD35=1
      echo "Build Python 3.5:" $BUILD35
      IS35=0; [ "${{ parameters.python_version }}" == "3.5" ] && IS35=1
      echo "Is Python 3.5:" $IS35
      ACTIVE=$(( IS35 && BUILD35 || ! IS35 ? 1 : 0 ))
      echo "Build active:" $ACTIVE
      echo "##vso[task.setvariable variable=active]$ACTIVE"
    displayName: 'Set status'

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '${{ parameters.python_version }}'
      allowUnstable: true
    condition: eq(variables['active'], 1)

#  - script: |
#      SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%
#    condition: and(eq(variables['os'], 'win'), eq(variables['active'], 1))
#    displayName: 'Before install (Windows)'

  # This is messy, but the most convenient way to turn a JSON file into env
  # variables without requiring extra dependencies. The "##vso" stuff makes the
  # variables available to later steps.
  - bash: |
      eval $(python -c "
      import json; import sys
      with open('build-spec.json') as f: spec = json.load(f)
      release_id = spec.get('upload-to', {}).get('release-id', '').replace('/', '-')
      use_llvm = spec.get('options', {}).get('llvm', '')
      use_rust = spec.get('options', {}).get('rust', '')
      sys.stdout.write('BUILD_SPEC_CLONE_URL={}\n'.format(spec.get('clone-url')))
      sys.stdout.write('BUILD_SPEC_COMMIT={}\n'.format(spec.get('commit')))
      sys.stdout.write('BUILD_SPEC_PACKAGE_NAME={}\n'.format(spec.get('package-name')))
      sys.stdout.write('BUILD_SPEC_RELEASE_ID={}\n'.format(release_id))
      sys.stdout.write('BUILD_SPEC_LLVM={}\n'.format(use_llvm))
      sys.stdout.write('BUILD_SPEC_RUST={}\n'.format(use_rust))")
      echo "##vso[task.setvariable variable=clone_url]$BUILD_SPEC_CLONE_URL"
      echo "##vso[task.setvariable variable=package_name]$BUILD_SPEC_PACKAGE_NAME"
      echo "##vso[task.setvariable variable=commit]$BUILD_SPEC_COMMIT"
      echo "##vso[task.setvariable variable=release_tag]$BUILD_SPEC_RELEASE_ID"
      echo "##vso[task.setvariable variable=checkout]$REPO_DIR"
      echo "##vso[task.setvariable variable=llvm]$BUILD_SPEC_LLVM"
      echo "##vso[task.setvariable variable=rust]$BUILD_SPEC_RUST"
      echo "##vso[build.updatebuildnumber]$BUILD_SPEC_RELEASE_ID"
    condition: eq(variables['active'], 1)
    displayName: 'Set variables'

  - script: |
      python -m pip install -U cibuildwheel pip setuptools
    condition: eq(variables['active'], 1)
    displayName: 'Install cibuildwheel'

  - script: |
      git clone $(clone_url) $(checkout)
      cd $(checkout)
      git checkout $(commit)
    condition: eq(variables['active'], 1)
    displayName: 'Clone package repo'

  - script: |
      cd $(checkout)
      git submodule update --init
    condition: eq(variables['active'], 1)
    displayName: 'Update submodules'

  - script: |
      curl -sSf -o rustup-init.exe https://win.rustup.rs
      rustup-init.exe -y --profile minimal --default-toolchain stable --default-host x86_64-pc-windows-msvc
      set "PATH=%PATH%;%USERPROFILE%\.cargo\bin"
      rustc --version
    condition: and(eq(variables['os'], 'win'), eq(variables['rust'], 'true'), eq(variables['active'], 1))
    displayName: 'Install Rust if needed (Windows)'

  - script: choco install llvm
    condition: and(eq(variables['os'], 'win'), eq(variables['llvm'], 'true'), eq(variables['active'], 1))
    displayName: 'Install LLVM if needed (Windows)'

  # The env variables are needed to compile things like Blis
  - script: |
      set "PATH=C:\Program Files\LLVM\bin;%PATH%"
      set "INCLUDE=%$VC_INCLUDEPATH%"
    condition: and(eq(variables['os'], 'win'), eq(variables['active'], 1))
    displayName: 'Set up env (Windows)'

  - bash: |
      cd $(checkout)
      if [ "$(rust)" == "True" ]; then export CIBW_BEFORE_ALL_LINUX="curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain stable"; fi
      if [ "$(rust)" == "True" ]; then export CIBW_BEFORE_ALL_MACOS="curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain stable && rustup target add aarch64-apple-darwin"; fi
      # CIBW_ENVIRONMENT needs to remain unset for blis in order to use the
      # overrides from pyproject.toml
      if [ "$(package_name)" != "blis" ]; then export CIBW_ENVIRONMENT='PATH="$PATH:$HOME/.cargo/bin" SPACY_NUM_BUILD_JOBS=2'; fi
      if [ "$(package_name)" != "blis" -a -e "build-constraints.txt" ]; then export CIBW_ENVIRONMENT="$CIBW_ENVIRONMENT PIP_CONSTRAINT=build-constraints.txt"; fi
      export CIBW_BUILD_VERBOSITY=1
      export CIBW_BUILD_FRONTEND=pip
      export CIBW_ARCHS_MACOS="x86_64 arm64"
      export CIBW_TEST_SKIP="*-macosx_arm64"
      export CIBW_SKIP="pp* *-musllinux* *i686* *-win32 *-win_arm64"
      export CIBW_BEFORE_TEST="unset PIP_CONSTRAINT && pip install -U -r requirements.txt"
      export CIBW_BEFORE_TEST_WINDOWS="set PIP_CONSTRAINT= && pip install -U -r requirements.txt"
      export CIBW_TEST_COMMAND="pytest --tb=native --pyargs $(package_name)"
      if [ "$(package_name)" == "spacy_transformers" ]; then export CIBW_TEST_COMMAND="unset PIP_CONSTRAINT && pip install -U numpy tokenizers transformers {wheel} && $CIBW_TEST_COMMAND"; fi
      export CIBW_REPAIR_WHEEL_COMMAND_LINUX="auditwheel repair --strip -w {dest_dir} {wheel}"
      cibuildwheel --output-dir $(Build.SourcesDirectory)/wheelhouse
    condition: eq(variables['active'], 1)
    displayName: 'Build wheels'

  - task: CopyFiles@2
    inputs:
      contents: 'wheelhouse/**'
      targetFolder: $(Build.ArtifactStagingDirectory)
      flattenFolders: true
    condition: eq(variables['active'], 1)
    displayName: 'Copy wheels'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: '$(ARTIFACT_NAME)'
    condition: eq(variables['active'], 1)
    displayName: 'Publish artifact'

  - task: GitHubRelease@0
    inputs:
      gitHubConnection: '$(GH_CONNECTION)'
      repositoryName: '$(Build.Repository.Name)'
      action: 'edit'
      tagSource: manual
      tag: '$(release_tag)'
      addChangeLog: false
      assetUploadMode: replace
      assets: '$(Build.ArtifactStagingDirectory)/*'
    condition: and(not(eq(variables['GH_CONNECTION'], 'false')), eq(variables['active'], 1))
    displayName: 'Upload to GitHub release'
